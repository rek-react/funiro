{"version":3,"sources":["spoiler.js"],"names":["Spoilers","constructor","spoilers","this","spoilersRegular","Array","from","filter","item","dataset","split","initSpollers","spoilersMedia","mediaSpoilers","breakpointArray","forEach","breakpoint","paramsArray","value","type","trim","push","mediaQueries","map","index","array","indexOf","mediaBreakpoint","mediaType","matchMedia","window","spoilerArray","addEventListener","spoilerBlock","matches","classList","add","setSpoilerAction","initSpoilerBody","remove","removeEventListener","hideSpoilerBody","querySelectorAll","spoilerTitle","removeAttribute","contains","nextElementSibling","hidden","setAttribute","event","target","closest","oneSpoiler","hasAttribute","length","spoilerActiveTitle","parentElement","querySelector","_slideUp","toggle","_slideToggle","preventDefault","spoilersArray","document"],"mappings":"AAAA,MAAMA,SACHC,YAAYC,GACTC,KAAKD,SAAWA,EAChB,MAAME,EAAkBC,MAAMC,KAAKH,KAAKD,UAAUK,QAAOC,IAC9CA,EAAKC,QAAQP,SAASQ,MAAM,KAAK,KAExCN,GACDD,KAAKQ,aAAaP,GAErB,MAAMQ,EAAgBP,MAAMC,KAAKH,KAAKD,UAAUK,QAAOC,GAC7CA,EAAKC,QAAQP,SAASQ,MAAM,KAAK,KAEvCE,GACDT,KAAKU,cAAcD,GAGzBC,cAAcD,GACX,MAAME,EAAkB,GACxBF,EAAcG,SAAQP,IACnB,MACMQ,EAAa,GACbC,EAFST,EAAKC,QAAQP,SAEDQ,MAAM,KACjCM,EAAWE,MAAQD,EAAY,GAC/BD,EAAWG,KAAOF,EAAY,GAAKA,EAAY,GAAGG,OAAS,MAC3DJ,EAAWR,KAAOA,EAClBM,EAAgBO,KAAKL,MAExB,IAAIM,EAAeR,EAAgBS,KAAIf,GAC7B,IAAMA,EAAKW,KAAO,WAAaX,EAAKU,MAAQ,OAASV,EAAKU,MAAQ,IAAMV,EAAKW,OAEvFG,EAAeA,EAAaf,QAAO,CAACC,EAAMgB,EAAOC,IACvCA,EAAMC,QAAQlB,KAAUgB,IAElCF,EAAaP,SAAQC,IAClB,MAAMC,EAAcD,EAAWN,MAAM,KAC/BiB,EAAkBV,EAAY,GAC9BW,EAAYX,EAAY,GACxBY,EAAaC,OAAOD,WAAWZ,EAAY,IAC3Cc,EAAejB,EAAgBP,QAAOC,GAClCA,EAAKU,QAAUS,GAAmBnB,EAAKW,OAASS,IAE1DC,EAAWG,iBAAiB,UAAU,KACnC7B,KAAKQ,aAAaoB,EAAcF,MAEnC1B,KAAKQ,aAAaoB,EAAcF,MAGtClB,aAAaoB,EAAcF,GAAa,GACrCE,EAAahB,SAAQkB,IAClBA,EAAeJ,EAAaI,EAAazB,KAAOyB,EAC5CJ,EAAWK,UAAYL,GACxBI,EAAaE,UAAUC,IAAI,SAC3BH,EAAaD,iBAAiB,QAAS7B,KAAKkC,kBAC5ClC,KAAKmC,gBAAgBL,KAErBA,EAAaE,UAAUI,OAAO,SAC9BN,EAAaO,oBAAoB,QAASrC,KAAKkC,kBAC/ClC,KAAKmC,gBAAgBL,GAAc,OAI5CK,gBAAgBL,EAAcQ,GAAkB,GACvBR,EAAaS,iBAAiB,kBACtC3B,SAAQ4B,IACfF,GACDE,EAAaC,gBAAgB,YACxBD,EAAaR,UAAUU,SAAS,aAClCF,EAAaG,mBAAmBC,QAAS,KAG5CJ,EAAaK,aAAa,WAAY,MACtCL,EAAaG,mBAAmBC,QAAS,MAIlDV,iBAAiBY,GACd,GAAIA,EAAMC,OAAOC,QAAQ,kBAAmB,CACzC,MAAMR,EAAeM,EAAMC,OAAOC,QAAQ,kBACpClB,EAAeU,EAAaQ,QAAQ,mBACpCC,IAAanB,EAAaoB,aAAa,oBAC7C,IAAKpB,EAAaS,iBAAiB,WAAWY,OAAQ,CACnD,GAAIF,IAAeT,EAAaR,UAAUU,SAAS,WAAY,CAC5D,MAAMU,EAAqBtB,EAAauB,cAAcC,cAAc,0BAChEF,IACDA,EAAmBpB,UAAUI,OAAO,WACpCmB,SAASH,EAAmBT,mBAAoB,MAGtDH,EAAaR,UAAUwB,OAAO,WAC9BC,aAAajB,EAAaG,mBAAoB,KAGjDG,EAAMY,mBAMf,MAAMC,cAAgBC,SAASrB,iBAAiB,mBAC5CoB,eACD,IAAI9D,SAAS8D","file":"spoiler.min.js","sourcesContent":["class Spoilers {\r\n   constructor(spoilers) {\r\n      this.spoilers = spoilers\r\n      const spoilersRegular = Array.from(this.spoilers).filter(item => {\r\n         return !item.dataset.spoilers.split(',')[0];\r\n      })\r\n      if (spoilersRegular) {\r\n         this.initSpollers(spoilersRegular)\r\n      }\r\n      const spoilersMedia = Array.from(this.spoilers).filter(item => {\r\n         return item.dataset.spoilers.split(',')[0];\r\n      })\r\n      if (spoilersMedia) {\r\n         this.mediaSpoilers(spoilersMedia)\r\n      }\r\n   }\r\n   mediaSpoilers(spoilersMedia) {\r\n      const breakpointArray = []\r\n      spoilersMedia.forEach(item => {\r\n         const params = item.dataset.spoilers\r\n         const breakpoint = {}\r\n         const paramsArray = params.split(',')\r\n         breakpoint.value = paramsArray[0]\r\n         breakpoint.type = paramsArray[1] ? paramsArray[1].trim() : 'max'\r\n         breakpoint.item = item\r\n         breakpointArray.push(breakpoint)\r\n      })\r\n      let mediaQueries = breakpointArray.map(item => {\r\n         return '(' + item.type + '-width: ' + item.value + 'px),' + item.value + ',' + item.type\r\n      })\r\n      mediaQueries = mediaQueries.filter((item, index, array) => {\r\n         return array.indexOf(item) === index\r\n      })\r\n      mediaQueries.forEach(breakpoint => {\r\n         const paramsArray = breakpoint.split(',')\r\n         const mediaBreakpoint = paramsArray[1]\r\n         const mediaType = paramsArray[2]\r\n         const matchMedia = window.matchMedia(paramsArray[0])\r\n         const spoilerArray = breakpointArray.filter(item => {\r\n            return item.value === mediaBreakpoint && item.type === mediaType\r\n         })\r\n         matchMedia.addEventListener('change', () => {\r\n            this.initSpollers(spoilerArray, matchMedia)\r\n         })\r\n         this.initSpollers(spoilerArray, matchMedia)\r\n      })\r\n   }\r\n   initSpollers(spoilerArray, matchMedia = false) {\r\n      spoilerArray.forEach(spoilerBlock => {\r\n         spoilerBlock = matchMedia ? spoilerBlock.item : spoilerBlock\r\n         if (matchMedia.matches || !matchMedia) {\r\n            spoilerBlock.classList.add('_init')\r\n            spoilerBlock.addEventListener('click', this.setSpoilerAction)\r\n            this.initSpoilerBody(spoilerBlock)\r\n         } else {\r\n            spoilerBlock.classList.remove('_init')\r\n            spoilerBlock.removeEventListener('click', this.setSpoilerAction)\r\n            this.initSpoilerBody(spoilerBlock, false)\r\n         }\r\n      })\r\n   }\r\n   initSpoilerBody(spoilerBlock, hideSpoilerBody = true) {\r\n      const spoilerTitles = spoilerBlock.querySelectorAll('[data-spoiler]')\r\n      spoilerTitles.forEach(spoilerTitle => {\r\n         if (hideSpoilerBody) {\r\n            spoilerTitle.removeAttribute('tabindex')\r\n            if (!spoilerTitle.classList.contains('_active')) {\r\n               spoilerTitle.nextElementSibling.hidden = true\r\n            }\r\n         } else {\r\n            spoilerTitle.setAttribute('tabindex', '-1')\r\n            spoilerTitle.nextElementSibling.hidden = false\r\n         }\r\n      })\r\n   }\r\n   setSpoilerAction(event) {\r\n      if (event.target.closest('[data-spoiler]')) {\r\n         const spoilerTitle = event.target.closest('[data-spoiler]')\r\n         const spoilerBlock = spoilerTitle.closest('[data-spoilers]')\r\n         const oneSpoiler = spoilerBlock.hasAttribute('data-one-spoiler') ? true : false\r\n         if (!spoilerBlock.querySelectorAll('._slide').length) {\r\n            if (oneSpoiler && !spoilerTitle.classList.contains('_active')) {\r\n               const spoilerActiveTitle = spoilerBlock.parentElement.querySelector('[data-spoiler]._active')\r\n               if (spoilerActiveTitle) {\r\n                  spoilerActiveTitle.classList.remove('_active')\r\n                  _slideUp(spoilerActiveTitle.nextElementSibling, 500)\r\n               }\r\n            }\r\n            spoilerTitle.classList.toggle('_active')\r\n            _slideToggle(spoilerTitle.nextElementSibling, 500)\r\n         }\r\n\r\n         event.preventDefault()\r\n      }\r\n\r\n   }\r\n\r\n}\r\nconst spoilersArray = document.querySelectorAll('[data-spoilers]')\r\nif (spoilersArray) {\r\n   new Spoilers(spoilersArray)\r\n}\r\n\r\n"]}